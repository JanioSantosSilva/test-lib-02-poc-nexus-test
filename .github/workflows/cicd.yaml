name: CI/CD Workflow

on:
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest


    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
        
    - name: Get properties
      id: checar_nome
      env:
        REPO_NAME: ${{ github.repository }}
      run: |
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2 | cut -d'-' -f4-)
      
        echo "Nome do repositório: $REPO_NAME"
        
        NOME_ENCONTRADO=$(echo "$REPO_NAME" | tr '-' '\n' | grep -E '^[a-zA-Z0-9]{4}$' || echo "$REPO_NAME" | grep -o 'EINT[^/]*')
        
        if [[ -n "$NOME_ENCONTRADO" ]]; then
          DIST_PROPERTIES=($(find . -name "test*.properties" -exec grep -h '^dist' {} +))
            echo "Todas as propriedades dist foram armazenadas no array:"
            printf "%s\n" "${DIST_PROPERTIES[@]}"
            for property in "${DIST_PROPERTIES[@]}"; do
              caminho=$(echo "$property" | sed 's/.*="\([^"]*\)".*/\1/')
              echo "paths: $caminho"
                properties_file=$(find . -name "jar*.properties")
                if [[ -n "$properties_file" ]]; then
                   sed -i "s|^dist.*|dist.newvalue=$caminho|" "$properties_file"
                   echo "Updated properties file: $properties_file"
                   echo "New value set for dist: dist.newvalue=$caminho"
                else
                  echo "Arquivo other.properties não encontrado."
                fi
            done
        else
           echo "Nenhum nome de centro de custo encontrado."
        fi

    - name: Upload arquivos para Nexus
      run: |
        commitID=$(git rev-parse --short HEAD)  
        jarName="validate.jar" 
        jarNameWithCommit="${jarName%.jar}-${commitID}.jar" 
        echo "Fazendo upload do arquivo JAR antes do for: $jarNameWithCommit"
        for dist in $(cat dist.properties); do
          echo "Fazendo upload do arquivo JAR: $jarNameWithCommit"
        done
 

         

  #NOME_ENCONTRADO=$(echo "$REPO_NAME" | tr '-' '\n' | grep -E '^[a-zA-Z0-9]{4}$' || echo "$REPO_NAME" | grep -o 'EINT[^/]*')
  #      NAME_PROPERTIES=$([ "$NOME_ENCONTRADO" == EINT ] && echo "EINT-${REPO_NAME_PROPERTIES}.properties" || echo "${NOME_ENCONTRADO}.properties")
  #      
  #      if [[ -n "$NOME_ENCONTRADO" ]]; then
  #        DIST_PROPERTIES=($(find . -name "*.properties" -exec grep -h '^dist' {} +))
  #        echo "Todas as propriedades dist foram armazenadas no array:"
  #        printf "%s\n" "${DIST_PROPERTIES[@]}"
  #        for property in "${DIST_PROPERTIES[@]}"; do
  #           caminho=$(echo "$property" | sed 's/.*="\([^"]*\)".*/\1/')
  #           echo "$caminho"
  #           # Set new values in the properties file
  #           sed -i 's/^dist.*/dist.newvalue=NEW_VALUE/' "$NAME_PROPERTIES"
  #        done
  #      else
  #        echo "Nenhum nome de centro de custo encontrado."
  #      fi
        
#
    #    if [[ -n "$NOME_ENCONTRADO" ]]; then
    #      LOWERCASE_NAME=$(echo "$NOME_ENCONTRADO" | tr '[:upper:]' '[:lower:]')
    #      echo "Buscando arquivo properties no repositório com prefixo: $LOWERCASE_NAME"
    #      for FILE in $(find . -name "${LOWERCASE_NAME}-*.properties"); do
    #        echo "Arquivo encontrado: $FILE"
    #
    #         while IFS='=' read -r key value; do
    #         if [[ $key == dist* ]]; then
    #            echo "Exporting property: ${key}=${value}"
    #           echo "${key}=${value}" >> $GITHUB_ENV
    #         fi
    #       done < "$FILE"
    #      done
    #  
    #      echo "All dist properties have been exported."
    #    else
    #     echo "Nenhum nome de centro de custo encontrado."
    #    fi
#
    #
#

    # 3. Leitura do arquivo dist.properties e criação de array
    #- name: Ler dist.properties e criar array de destinos
    #  id: ler_properties
    #  run: |
    #    # Inicializar array de destinos
    #    DESTINOS=()
    #
    #    # Ler todos os valores que começam com 'jar.dist'
    #    while IFS='=' read -r key value; do
    #      if [[ $key == jar.dist* ]]; then
    #        DESTINOS+=("$value")
    #      fi
    #    done < dist.properties
    #
    #    # Exibir o array de destinos
    #    echo "Destinos: ${DESTINOS[@]}"
    #
    #    # 4. Upload do artefato JAR para múltiplos destinos no Nexus

    #- name: Upload do artefato JAR no Nexus
    #  run: |
    #    # Convertendo a string de volta para um array
    #    IFS=' ' read -r -a DESTINOS <<< "${{ env.DESTINOS }}"
    #    
    #    # Iterando sobre cada destino e fazendo o upload
    #    for DESTINO in "${DESTINOS[@]}"; do
    #      echo "Fazendo upload para: $DESTINO"
    #      
    #      # Upload do artefato para o Nexus
    #      curl -u ${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }} \
    #        --upload-file target/$JAR_NAME \
    #        $NEXUS_URL/$DESTINO/$JAR_NAME
    #    done

    # 5. Verificação da publicação no Nexus
    #- name: Ler dist.properties e fazer upload do artefato JAR no Nexus
    #  run: |
    #    # Inicializar array de destinos
    #    DESTINOS=()
    #
    #    # Ler todos os valores que começam com 'jar.dist'
    #    while IFS='=' read -r key value; do
    #      if [[ $key == dist* ]]; then
    #        DESTINOS+=("$value")
    #      fi
    #    done < dist.properties
    #
    #    # Exibir o array de destinos
    #    echo "Destinos: ${DESTINOS[@]}"
    #
    #    # Fazer upload do artefato JAR para múltiplos destinos no Nexus
    #    for DESTINO in "${DESTINOS[@]}"; do
    #      echo "Fazendo upload para: $DESTINO"
    #      







#teste

        # # Upload do artefato para o Nexus
        #curl -u ${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }} \
        #   --upload-file target/$JAR_NAME \
        #    $NEXUS_URL/$DESTINO/$JAR_NAME
        #done

        